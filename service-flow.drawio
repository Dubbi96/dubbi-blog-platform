<mxfile host="app.diagrams.net" modified="2024-02-28T13:54:03.288Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36" etag="hJeUms-4Qp2XFC1zE_o4" version="23.1.7" type="github">
  <diagram name="Page-1" id="2YBvvXClWsGukQMizWep">
    <mxGraphModel dx="3668" dy="1476" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="1fV30mokUrKp74guWzHp-1" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CustomJsonUsernamePasswordAuthenticationFilter&lt;/span&gt;&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- &quot;/login&quot;으로 POST 요청이 오면 인증 절차 실행&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;-&amp;nbsp;CustomJsonUsernamePasswordAuthenticationFilter()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - AntPathRequestMatcher를 통해 &quot;/login&quot; url과 POST method로 요청이 오면 해당 필터를 실행&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;-&amp;nbsp;attemptAuthentication&lt;/font&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;()&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - application.json의 타입으로 입력된 정보인지 확인&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - POST 요청으로 들어온 reqeust의 body에 username과 password를 UsernamePasswordAuthenticationToken&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 객체에 넣고 AbstractAuthenticationProcessingFilter의 authenticate() function을 통해 인증 처리&lt;/font&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;strokeColor=default;" parent="1" vertex="1">
          <mxGeometry x="230" y="95" width="660" height="290" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-1" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;SecurityFilter&lt;/span&gt;&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- 서버로 들어오는 요청에 대한 Filter를 Chaining 하여 적용&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- filterChain()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - FilterChain은 다음과 같은 과정을 거침&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1. cors&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.1. cors는 Cross-Origin Resource Sharing으로 특정 도메인에서만 백엔드 서버로 접근이 가능하도록 설정&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1.2. corsConfigurationSource는 허용할 오리진, HTTP메소드, 허용할 헤더 설정, 쿠키 사용 여부, pre-flight 캐싱 설정&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2. csrf&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.1. csrf는 Cross-Site Request Forgery로 해당 공격을 방지하는 보안 기능&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.2. REST API는 STATELESS 서버를 유지하므로, 해당 설정 비활성화&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3. formLogin&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.1. 세션 기반의 인증 메커니즘 활성화를 의미&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3.2. REST API는 STATELESS 서버를 유지하므로, 해당 설정 비활성화&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4. httpBasic&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.1. 세션 기반의 인증 메커니즘 활성화를 의미&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4.2. REST API는 STATELESS 서버를 유지하므로, 해당 설정 비활성화&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5. sessionManagement&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.1. 서버의 상태관리 정보 관리 방식을 설정&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;5.2. SessionCreationPolicy.STATELESS로 설정&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6. authorizeHttpRequest&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.1. 프로젝트에서 리소스 혹은 메소드에 대한 권한 및 인증 절차 필요 여부를 설정&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;6.2. 특정 페이지를 제외하고는 authentication 과정을 거쳐야만 접근 가능&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7. oauth2Login&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.1. OAuth2.0 로그인 에대한 과정과 로그인 절차를 위한 service 매핑&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;7.2. SuccessHandler, FailureHandler, OAuth2UserService를 사용하여 로그인 과정을 정의&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;8. &lt;b&gt;CustomJsonUsernamePasswordAuthenticationFilter 설정&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;8.1. 해당 필터를 springSecurity의 기본 filter의 LogoutFilter 이후에 작용되도록 적용&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;9. jwtAuthenticationProcessingFilter 설정&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;font-weight: bold; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;font-weight: bold; white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;9.1. 해당 필터를 CustomJsonUsernamePasswordAuthenticationFilter 이전에 설정&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;FilterChain에서 의 절차&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;1. http.FilterChain 우선 적용&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;2. filterChian에서 Logut이 발생할 경우&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.1. jwtAuthenticationProcessingFilter 실행&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2.2. customJsonUsernamePasswordAuthenticationFilter 실행&lt;br&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="-760" y="95" width="810" height="720" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-2" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;JwtAuthenticationProcessingFilter&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- 메소드 호출 시 들어오는 Request에 대해 적용하는 Filter&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- doFilterInternal()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - &quot;/login&quot;을 통해 들어온 요청을 제외한 모든 요청에 대해서 해당 필터를 적용 (필터는 아래와 같은 순서로 적용됨)&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1. &quot;/login&quot;에 대한 요청이 들어오면, JwtAuthenticationFilter를 종료하고 &lt;b&gt;다음 필터로 연결&lt;/b&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2. 요청 헤더에 RefreshToken을 추출&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3. refresh token이 있다면, 토큰이 유효한지 확인하고 유효하다면 access token을 재발급 한 후 &lt;b&gt;다음 필터로 연결&lt;/b&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4. refresh token이 유효하지 않거나 없다면 access token을 추출하여 확인&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="226" y="425" width="810" height="250" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-3" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;JwtService&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- Jwt 발급, 인증을 담당하는 서비스&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- createAccessToken()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - JWT Token에 email과 expiration시간을 입력하여 반환&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- createRefreshToken()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - Claim 없이 refresh token을 생성하여 전달&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- sendAccessToken()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - HttpServletResponse Header에 access token 정보를 추가&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- sendAccessAndRefreshToken()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - HttpServletResponse header에 access token과 refresh token을 동시에 추가&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- extractRefreshToken()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 요청(request) header에서 refresh token 정보 추출&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- extractAccessToken()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 요청(request) header에서 access token 정보 추출&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- extractEmail()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - access token을 verifier builder를 통해 확인하고, 유효하다면 (만료되지 않았다면) email 정보를 반환&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- extractNickname()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - access token에서 nickname을 추출 (access token에 nickname claim이 안들어감 - 사용처 없음)&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- updateRefreshToken()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 로그인이 완료되면 db에 refresh token 정보 update&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;- isTokenValid()&lt;/b&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 토큰이 유효한지 (만료되지 않았는지) 확인&lt;/b&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="1128" y="91" width="810" height="610" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-4" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;CustomOAuth2UserService&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- OAuth2.0 로그인에서 사용하기 위한 Custom 서비스&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- loadUser()&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;1. DefaultOAuth2UserService 객체를 생성하여 DefaultOAuth2UserService.loadUser를 통해 OAuth2User 추출&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;2. 로그인을 시도한 플랫폼에 맞는 정보를 받아 attribute를 추출&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;3. 추출된 정보를 기반으로 User를 조회하고, 없다면 신규 유저 생성&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;4. CustomOAuth2User에 Role, Attribute, email을 담아 반환&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="1128" y="742" width="810" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-5" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;CustomOAuthAttributes&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- OAuth2.0 로그인 시도 시 생성되는 attribute들을 변환&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;-&lt;/font&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt; of&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - SocialType에 따라 다르게 처리해야 하므로, social type을 네이버, 카카오, 구글 순으로 확인하며 올바른 attribute 로 변환하여 출력&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- toEntity()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; - socialType과 OAuth2UserInfo에 담긴 내용을 기반으로 User 객체를 Entity화 하여 반환&lt;/font&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="2036" y="91" width="810" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-6" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;LoginService (현재 사용처 없음)&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- email을 받아 사용자 정보를 확인하고, spring security의 userdtails객체로 변환하여 반환&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- loadUserByUsername()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 유저 이메일을 확인하여 username, password, roles를 확인하고, spring security의 userdtails 객체로 반환&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="1128" y="1013" width="810" height="230" as="geometry" />
        </mxCell>
        <mxCell id="cRLDKxiATWoi08usjRkC-7" value="&lt;p style=&quot;line-height: 40%;&quot;&gt;&lt;/p&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;User Service(현재 사용처 없음)&lt;/h1&gt;&lt;h1 style=&quot;line-height: 110%;&quot;&gt;&lt;span style=&quot;font-size: 12px; font-weight: 400;&quot;&gt;- email을 받아 사용자 정보를 확인하고, spring security의 userdtails객체로 변환하여 반환&lt;/span&gt;&lt;/h1&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;Function&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 15px;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;- loadUserByUsername()&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;line-height: 120%; font-size: 13px;&quot;&gt;&lt;font style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;&amp;nbsp; - 유저 이메일을 확인하여 username, password, roles를 확인하고, spring security의 userdtails 객체로 반환&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;" style="text;html=1;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;shadow=0;strokeColor=default;" vertex="1" parent="1">
          <mxGeometry x="1128" y="1271" width="810" height="230" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
